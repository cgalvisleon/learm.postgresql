
CREATE SCHEMA IF NOT EXISTS "test";

CREATE TABLE IF NOT EXISTS test.TRANSACTIONS(
 TABLE_SCHEMA VARCHAR(80) DEFAULT '',
 TABLE_NAME VARCHAR(80) DEFAULT '',
 ACTION VARCHAR(80) DEFAULT '',
 _IDT VARCHAR(80) DEFAULT '-1',
 INDEX INTEGER DEFAULT 0
);
CREATE INDEX IF NOT EXISTS TRANSACTIONS__IDT_IDX ON test.TRANSACTIONS(_IDT);
CREATE INDEX IF NOT EXISTS TRANSACTIONS_INDEX_IDX ON test.TRANSACTIONS(INDEX);

CREATE OR REPLACE FUNCTION test.SYNC_INSERT()
RETURNS
 TRIGGER AS $$
DECLARE
 SYNC BOOLEAN;
BEGIN
 SYNC = NEW._IDT = '-1';
 IF SYNC THEN NEW._IDT = uuid_generate_v4(); END IF;

 INSERT INTO test.TRANSACTIONS(TABLE_SCHEMA, TABLE_NAME, ACTION, _IDT)
 VALUES (TG_TABLE_SCHEMA, TG_TABLE_NAME, TG_OP, NEW._IDT);

 IF SYNC THEN
  PERFORM pg_notify(
   'sync',
   json_build_object(
     '_idt', NEW._IDT
   )::text
  );
 END IF;

 RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION test.SYNC_UPDATE()
RETURNS
 TRIGGER AS $$
DECLARE
 SYNC BOOLEAN;
BEGIN
 SYNC = NEW._IDT != '-1';

 IF SYNC THEN
  UPDATE test.TRANSACTIONS SET
  ACTION = TG_OP,
  INDEX = 0
  WHERE _IDT = NEW._IDT;

  PERFORM pg_notify(
   'sync',
   json_build_object(
     '_idt', NEW._IDT
   )::text
  );
 ELSE
  NEW._IDT = OLD._IDT;
  UPDATE test.TRANSACTIONS SET
  ACTION = TG_OP
  WHERE _IDT = NEW._IDT;
 END IF; 

 RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE OR REPLACE FUNCTION test.SYNC_DELETE()
RETURNS
 TRIGGER AS $$
DECLARE
 OK VARCHAR(80);
BEGIN
 SELECT _IDT INTO OK FROM test.TRANSACTIONS WHERE _IDT = OLD._IDT LIMIT 1;
 IF FOUND THEN
  UPDATE test.TRANSACTIONS SET
  ACTION = TG_OP,
  INDEX = 0
  WHERE _IDT = OLD._IDT;

  PERFORM pg_notify(
   'sync',
   json_build_object(
     '_idt', OLD._IDT
   )::text
  );
 END IF;

 RETURN OLD;
END;
$$ LANGUAGE plpgsql;

-- TRIGGERS
ALTER TABLE test.USERS ADD COLUMN _IDT VARCHAR(80) DEFAULT '-1';
ALTER TABLE test.PROJECT ADD COLUMN _IDT VARCHAR(80) DEFAULT '-1';
ALTER TABLE test.USER_PROJECTS ADD COLUMN _IDT VARCHAR(80) DEFAULT '-1';

CREATE INDEX IF NOT EXISTS USERS_IDT_IDX ON test.USERS(_IDT);
CREATE INDEX IF NOT EXISTS PROJECT_IDT_IDX ON test.PROJECT(_IDT);
CREATE INDEX IF NOT EXISTS USER_PROJECTS_IDT_IDX ON test.USER_PROJECTS(_IDT);

-- USERS
DROP TRIGGER IF EXISTS SYNC_INSERT ON $1 CASCADE;
CREATE TRIGGER SYNC_INSERT
BEFORE INSERT ON $1
FOR EACH ROW
EXECUTE PROCEDURE test.USERS();

DROP TRIGGER IF EXISTS SYNC_UPDATE ON $1 CASCADE;
CREATE TRIGGER SYNC_UPDATE
BEFORE UPDATE ON $1
FOR EACH ROW
EXECUTE PROCEDURE test.USERS();

DROP TRIGGER IF EXISTS SYNC_DELETE ON $1 CASCADE;
CREATE TRIGGER SYNC_DELETE
BEFORE DELETE ON $1
FOR EACH ROW
EXECUTE PROCEDURE test.USERS();

-- PROJECT
DROP TRIGGER IF EXISTS SYNC_INSERT ON $1 CASCADE;
CREATE TRIGGER SYNC_INSERT
BEFORE INSERT ON $1
FOR EACH ROW
EXECUTE PROCEDURE test.PROJECT();

DROP TRIGGER IF EXISTS SYNC_UPDATE ON $1 CASCADE;
CREATE TRIGGER SYNC_UPDATE
BEFORE UPDATE ON $1
FOR EACH ROW
EXECUTE PROCEDURE test.PROJECT();

DROP TRIGGER IF EXISTS SYNC_DELETE ON $1 CASCADE;
CREATE TRIGGER SYNC_DELETE
BEFORE DELETE ON $1
FOR EACH ROW
EXECUTE PROCEDURE test.PROJECT();

-- USER_PROJECTS
DROP TRIGGER IF EXISTS SYNC_INSERT ON $1 CASCADE;
CREATE TRIGGER SYNC_INSERT
BEFORE INSERT ON $1
FOR EACH ROW
EXECUTE PROCEDURE test.USER_PROJECTS();

DROP TRIGGER IF EXISTS SYNC_UPDATE ON $1 CASCADE;
CREATE TRIGGER SYNC_UPDATE
BEFORE UPDATE ON $1
FOR EACH ROW
EXECUTE PROCEDURE test.USER_PROJECTS();

DROP TRIGGER IF EXISTS SYNC_DELETE ON $1 CASCADE;
CREATE TRIGGER SYNC_DELETE
BEFORE DELETE ON $1
FOR EACH ROW
EXECUTE PROCEDURE test.USER_PROJECTS();